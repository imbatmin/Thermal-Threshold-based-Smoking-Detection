import sensor
import time
import image
import rpc
import struct

# Color Tracking Thresholds (Grayscale Min, Grayscale Max)
threshold_list = [(240, 255)]

# Set the target temp range here
min_temp_in_celsius = 20
max_temp_in_celsius = 50

print("Resetting Lepton...")
sensor.reset()
sensor.ioctl(sensor.IOCTL_LEPTON_SET_MEASUREMENT_MODE, True)
sensor.ioctl(sensor.IOCTL_LEPTON_SET_MEASUREMENT_RANGE, min_temp_in_celsius, max_temp_in_celsius)
print("Lepton Res (%dx%d)" % (sensor.ioctl(sensor.IOCTL_LEPTON_GET_WIDTH), sensor.ioctl(sensor.IOCTL_LEPTON_GET_HEIGHT)))
print("Radiometry Available: " + ("Yes" if sensor.ioctl(sensor.IOCTL_LEPTON_GET_RADIOMETRY) else "No"))

sensor.set_pixformat(sensor.GRAYSCALE)
sensor.set_framesize(sensor.QQVGA)
sensor.skip_frames(time=5000)
clock = time.clock()

interface = rpc.rpc_usb_vcp_slave()

def map_g_to_temp(g):
    return (g * (max_temp_in_celsius - min_temp_in_celsius)) / 255.0 + min_temp_in_celsius

# This is called repeatedly by interface.stream_writer().
def stream_generator_cb():
    img = sensor.snapshot()
    blob_stats = []
    blobs = img.find_blobs(threshold_list, pixels_threshold=10, area_threshold=10, merge=True)
    
    for blob in blobs:
        blob_stats.append((blob.x(), blob.y(), blob.w(), blob.h()))
    
    img.to_rainbow(color_palette=image.PALETTE_IRONBOW)
    
    for blob in blobs:
        img.draw_rectangle(blob.rect())
        img.draw_cross(blob.cx(), blob.cy())
    
    for blob_stat in blob_stats:
        img.draw_string(blob_stat[0], blob_stat[1] - 10, "Fire Detected", mono_space=False)
    
    # Compress the image and prepend blob data
    compressed_img = img.compress(quality=90).bytearray()
    num_blobs = len(blob_stats)
    blob_data = struct.pack("<I", num_blobs) + b"".join(struct.pack("<4I", *blob) for blob in blob_stats)
    return blob_data + compressed_img

# Transmits a stream of bytes()'s generated by stream_generator_cb to the master device.
def jpeg_image_stream_cb():
    interface.stream_writer(stream_generator_cb)

def jpeg_image_stream(data):
    pixformat, framesize = bytes(data).decode().split(",")
    sensor.set_pixformat(eval(pixformat))
    sensor.set_framesize(eval(framesize))
    interface.schedule_callback(jpeg_image_stream_cb)
    return bytes()

interface.register_callback(jpeg_image_stream)
interface.loop()
